/*
 Generated by typeshare 1.13.2
*/
/** The levels of permission that a User or UserGroup can have on a resource. */
export var PermissionLevel;
(function (PermissionLevel) {
    /** No permissions. */
    PermissionLevel["None"] = "None";
    /** Can see the rousource */
    PermissionLevel["Read"] = "Read";
    /** Can execute actions on the resource */
    PermissionLevel["Execute"] = "Execute";
    /** Can update the resource configuration */
    PermissionLevel["Write"] = "Write";
})(PermissionLevel || (PermissionLevel = {}));
export var ActionState;
(function (ActionState) {
    /** Unknown case */
    ActionState["Unknown"] = "Unknown";
    /** Last clone / pull successful (or never cloned) */
    ActionState["Ok"] = "Ok";
    /** Last clone / pull failed */
    ActionState["Failed"] = "Failed";
    /** Currently running */
    ActionState["Running"] = "Running";
})(ActionState || (ActionState = {}));
export var TagBehavior;
(function (TagBehavior) {
    /** Returns resources which have strictly all the tags */
    TagBehavior["All"] = "All";
    /** Returns resources which have one or more of the tags */
    TagBehavior["Any"] = "Any";
})(TagBehavior || (TagBehavior = {}));
export var BuildState;
(function (BuildState) {
    /** Last build successful (or never built) */
    BuildState["Ok"] = "Ok";
    /** Last build failed */
    BuildState["Failed"] = "Failed";
    /** Currently building */
    BuildState["Building"] = "Building";
    /** Other case */
    BuildState["Unknown"] = "Unknown";
})(BuildState || (BuildState = {}));
export var RestartMode;
(function (RestartMode) {
    RestartMode["NoRestart"] = "no";
    RestartMode["OnFailure"] = "on-failure";
    RestartMode["Always"] = "always";
    RestartMode["UnlessStopped"] = "unless-stopped";
})(RestartMode || (RestartMode = {}));
export var TerminationSignal;
(function (TerminationSignal) {
    TerminationSignal["SigHup"] = "SIGHUP";
    TerminationSignal["SigInt"] = "SIGINT";
    TerminationSignal["SigQuit"] = "SIGQUIT";
    TerminationSignal["SigTerm"] = "SIGTERM";
})(TerminationSignal || (TerminationSignal = {}));
/**
 * Variants de/serialized from/to snake_case.
 *
 * Eg.
 * - NotDeployed -> not_deployed
 * - Restarting -> restarting
 * - Running -> running.
 */
export var DeploymentState;
(function (DeploymentState) {
    DeploymentState["Unknown"] = "unknown";
    DeploymentState["NotDeployed"] = "not_deployed";
    DeploymentState["Created"] = "created";
    DeploymentState["Restarting"] = "restarting";
    DeploymentState["Running"] = "running";
    DeploymentState["Removing"] = "removing";
    DeploymentState["Paused"] = "paused";
    DeploymentState["Exited"] = "exited";
    DeploymentState["Dead"] = "dead";
})(DeploymentState || (DeploymentState = {}));
/** Severity level of problem. */
export var SeverityLevel;
(function (SeverityLevel) {
    /** No problem. */
    SeverityLevel["Ok"] = "OK";
    /** Problem is imminent. */
    SeverityLevel["Warning"] = "WARNING";
    /** Problem fully realized. */
    SeverityLevel["Critical"] = "CRITICAL";
})(SeverityLevel || (SeverityLevel = {}));
export var Timelength;
(function (Timelength) {
    Timelength["OneSecond"] = "1-sec";
    Timelength["FiveSeconds"] = "5-sec";
    Timelength["TenSeconds"] = "10-sec";
    Timelength["FifteenSeconds"] = "15-sec";
    Timelength["ThirtySeconds"] = "30-sec";
    Timelength["OneMinute"] = "1-min";
    Timelength["TwoMinutes"] = "2-min";
    Timelength["FiveMinutes"] = "5-min";
    Timelength["TenMinutes"] = "10-min";
    Timelength["FifteenMinutes"] = "15-min";
    Timelength["ThirtyMinutes"] = "30-min";
    Timelength["OneHour"] = "1-hr";
    Timelength["TwoHours"] = "2-hr";
    Timelength["SixHours"] = "6-hr";
    Timelength["EightHours"] = "8-hr";
    Timelength["TwelveHours"] = "12-hr";
    Timelength["OneDay"] = "1-day";
    Timelength["ThreeDay"] = "3-day";
    Timelength["OneWeek"] = "1-wk";
    Timelength["TwoWeeks"] = "2-wk";
    Timelength["ThirtyDays"] = "30-day";
})(Timelength || (Timelength = {}));
export var Operation;
(function (Operation) {
    Operation["None"] = "None";
    Operation["CreateServer"] = "CreateServer";
    Operation["UpdateServer"] = "UpdateServer";
    Operation["DeleteServer"] = "DeleteServer";
    Operation["RenameServer"] = "RenameServer";
    Operation["StartContainer"] = "StartContainer";
    Operation["RestartContainer"] = "RestartContainer";
    Operation["PauseContainer"] = "PauseContainer";
    Operation["UnpauseContainer"] = "UnpauseContainer";
    Operation["StopContainer"] = "StopContainer";
    Operation["DestroyContainer"] = "DestroyContainer";
    Operation["StartAllContainers"] = "StartAllContainers";
    Operation["RestartAllContainers"] = "RestartAllContainers";
    Operation["PauseAllContainers"] = "PauseAllContainers";
    Operation["UnpauseAllContainers"] = "UnpauseAllContainers";
    Operation["StopAllContainers"] = "StopAllContainers";
    Operation["PruneContainers"] = "PruneContainers";
    Operation["CreateNetwork"] = "CreateNetwork";
    Operation["DeleteNetwork"] = "DeleteNetwork";
    Operation["PruneNetworks"] = "PruneNetworks";
    Operation["DeleteImage"] = "DeleteImage";
    Operation["PruneImages"] = "PruneImages";
    Operation["DeleteVolume"] = "DeleteVolume";
    Operation["PruneVolumes"] = "PruneVolumes";
    Operation["PruneDockerBuilders"] = "PruneDockerBuilders";
    Operation["PruneBuildx"] = "PruneBuildx";
    Operation["PruneSystem"] = "PruneSystem";
    Operation["CreateStack"] = "CreateStack";
    Operation["UpdateStack"] = "UpdateStack";
    Operation["RenameStack"] = "RenameStack";
    Operation["DeleteStack"] = "DeleteStack";
    Operation["WriteStackContents"] = "WriteStackContents";
    Operation["RefreshStackCache"] = "RefreshStackCache";
    Operation["PullStack"] = "PullStack";
    Operation["DeployStack"] = "DeployStack";
    Operation["StartStack"] = "StartStack";
    Operation["RestartStack"] = "RestartStack";
    Operation["PauseStack"] = "PauseStack";
    Operation["UnpauseStack"] = "UnpauseStack";
    Operation["StopStack"] = "StopStack";
    Operation["DestroyStack"] = "DestroyStack";
    Operation["DeployStackService"] = "DeployStackService";
    Operation["PullStackService"] = "PullStackService";
    Operation["StartStackService"] = "StartStackService";
    Operation["RestartStackService"] = "RestartStackService";
    Operation["PauseStackService"] = "PauseStackService";
    Operation["UnpauseStackService"] = "UnpauseStackService";
    Operation["StopStackService"] = "StopStackService";
    Operation["DestroyStackService"] = "DestroyStackService";
    Operation["CreateDeployment"] = "CreateDeployment";
    Operation["UpdateDeployment"] = "UpdateDeployment";
    Operation["RenameDeployment"] = "RenameDeployment";
    Operation["DeleteDeployment"] = "DeleteDeployment";
    Operation["Deploy"] = "Deploy";
    Operation["PullDeployment"] = "PullDeployment";
    Operation["StartDeployment"] = "StartDeployment";
    Operation["RestartDeployment"] = "RestartDeployment";
    Operation["PauseDeployment"] = "PauseDeployment";
    Operation["UnpauseDeployment"] = "UnpauseDeployment";
    Operation["StopDeployment"] = "StopDeployment";
    Operation["DestroyDeployment"] = "DestroyDeployment";
    Operation["CreateBuild"] = "CreateBuild";
    Operation["UpdateBuild"] = "UpdateBuild";
    Operation["RenameBuild"] = "RenameBuild";
    Operation["DeleteBuild"] = "DeleteBuild";
    Operation["RunBuild"] = "RunBuild";
    Operation["CancelBuild"] = "CancelBuild";
    Operation["CreateRepo"] = "CreateRepo";
    Operation["UpdateRepo"] = "UpdateRepo";
    Operation["RenameRepo"] = "RenameRepo";
    Operation["DeleteRepo"] = "DeleteRepo";
    Operation["CloneRepo"] = "CloneRepo";
    Operation["PullRepo"] = "PullRepo";
    Operation["BuildRepo"] = "BuildRepo";
    Operation["CancelRepoBuild"] = "CancelRepoBuild";
    Operation["CreateProcedure"] = "CreateProcedure";
    Operation["UpdateProcedure"] = "UpdateProcedure";
    Operation["RenameProcedure"] = "RenameProcedure";
    Operation["DeleteProcedure"] = "DeleteProcedure";
    Operation["RunProcedure"] = "RunProcedure";
    Operation["CreateAction"] = "CreateAction";
    Operation["UpdateAction"] = "UpdateAction";
    Operation["RenameAction"] = "RenameAction";
    Operation["DeleteAction"] = "DeleteAction";
    Operation["RunAction"] = "RunAction";
    Operation["CreateBuilder"] = "CreateBuilder";
    Operation["UpdateBuilder"] = "UpdateBuilder";
    Operation["RenameBuilder"] = "RenameBuilder";
    Operation["DeleteBuilder"] = "DeleteBuilder";
    Operation["CreateAlerter"] = "CreateAlerter";
    Operation["UpdateAlerter"] = "UpdateAlerter";
    Operation["RenameAlerter"] = "RenameAlerter";
    Operation["DeleteAlerter"] = "DeleteAlerter";
    Operation["TestAlerter"] = "TestAlerter";
    Operation["CreateServerTemplate"] = "CreateServerTemplate";
    Operation["UpdateServerTemplate"] = "UpdateServerTemplate";
    Operation["RenameServerTemplate"] = "RenameServerTemplate";
    Operation["DeleteServerTemplate"] = "DeleteServerTemplate";
    Operation["LaunchServer"] = "LaunchServer";
    Operation["CreateResourceSync"] = "CreateResourceSync";
    Operation["UpdateResourceSync"] = "UpdateResourceSync";
    Operation["RenameResourceSync"] = "RenameResourceSync";
    Operation["DeleteResourceSync"] = "DeleteResourceSync";
    Operation["WriteSyncContents"] = "WriteSyncContents";
    Operation["CommitSync"] = "CommitSync";
    Operation["RunSync"] = "RunSync";
    Operation["CreateVariable"] = "CreateVariable";
    Operation["UpdateVariableValue"] = "UpdateVariableValue";
    Operation["DeleteVariable"] = "DeleteVariable";
    Operation["CreateGitProviderAccount"] = "CreateGitProviderAccount";
    Operation["UpdateGitProviderAccount"] = "UpdateGitProviderAccount";
    Operation["DeleteGitProviderAccount"] = "DeleteGitProviderAccount";
    Operation["CreateDockerRegistryAccount"] = "CreateDockerRegistryAccount";
    Operation["UpdateDockerRegistryAccount"] = "UpdateDockerRegistryAccount";
    Operation["DeleteDockerRegistryAccount"] = "DeleteDockerRegistryAccount";
})(Operation || (Operation = {}));
/** An update's status */
export var UpdateStatus;
(function (UpdateStatus) {
    /** The run is in the system but hasn't started yet */
    UpdateStatus["Queued"] = "Queued";
    /** The run is currently running */
    UpdateStatus["InProgress"] = "InProgress";
    /** The run is complete */
    UpdateStatus["Complete"] = "Complete";
})(UpdateStatus || (UpdateStatus = {}));
export var ContainerStateStatusEnum;
(function (ContainerStateStatusEnum) {
    ContainerStateStatusEnum["Empty"] = "";
    ContainerStateStatusEnum["Created"] = "created";
    ContainerStateStatusEnum["Running"] = "running";
    ContainerStateStatusEnum["Paused"] = "paused";
    ContainerStateStatusEnum["Restarting"] = "restarting";
    ContainerStateStatusEnum["Removing"] = "removing";
    ContainerStateStatusEnum["Exited"] = "exited";
    ContainerStateStatusEnum["Dead"] = "dead";
})(ContainerStateStatusEnum || (ContainerStateStatusEnum = {}));
export var HealthStatusEnum;
(function (HealthStatusEnum) {
    HealthStatusEnum["Empty"] = "";
    HealthStatusEnum["None"] = "none";
    HealthStatusEnum["Starting"] = "starting";
    HealthStatusEnum["Healthy"] = "healthy";
    HealthStatusEnum["Unhealthy"] = "unhealthy";
})(HealthStatusEnum || (HealthStatusEnum = {}));
export var RestartPolicyNameEnum;
(function (RestartPolicyNameEnum) {
    RestartPolicyNameEnum["Empty"] = "";
    RestartPolicyNameEnum["No"] = "no";
    RestartPolicyNameEnum["Always"] = "always";
    RestartPolicyNameEnum["UnlessStopped"] = "unless-stopped";
    RestartPolicyNameEnum["OnFailure"] = "on-failure";
})(RestartPolicyNameEnum || (RestartPolicyNameEnum = {}));
export var MountTypeEnum;
(function (MountTypeEnum) {
    MountTypeEnum["Empty"] = "";
    MountTypeEnum["Bind"] = "bind";
    MountTypeEnum["Volume"] = "volume";
    MountTypeEnum["Tmpfs"] = "tmpfs";
    MountTypeEnum["Npipe"] = "npipe";
    MountTypeEnum["Cluster"] = "cluster";
})(MountTypeEnum || (MountTypeEnum = {}));
export var MountBindOptionsPropagationEnum;
(function (MountBindOptionsPropagationEnum) {
    MountBindOptionsPropagationEnum["Empty"] = "";
    MountBindOptionsPropagationEnum["Private"] = "private";
    MountBindOptionsPropagationEnum["Rprivate"] = "rprivate";
    MountBindOptionsPropagationEnum["Shared"] = "shared";
    MountBindOptionsPropagationEnum["Rshared"] = "rshared";
    MountBindOptionsPropagationEnum["Slave"] = "slave";
    MountBindOptionsPropagationEnum["Rslave"] = "rslave";
})(MountBindOptionsPropagationEnum || (MountBindOptionsPropagationEnum = {}));
export var HostConfigCgroupnsModeEnum;
(function (HostConfigCgroupnsModeEnum) {
    HostConfigCgroupnsModeEnum["Empty"] = "";
    HostConfigCgroupnsModeEnum["Private"] = "private";
    HostConfigCgroupnsModeEnum["Host"] = "host";
})(HostConfigCgroupnsModeEnum || (HostConfigCgroupnsModeEnum = {}));
export var HostConfigIsolationEnum;
(function (HostConfigIsolationEnum) {
    HostConfigIsolationEnum["Empty"] = "";
    HostConfigIsolationEnum["Default"] = "default";
    HostConfigIsolationEnum["Process"] = "process";
    HostConfigIsolationEnum["Hyperv"] = "hyperv";
})(HostConfigIsolationEnum || (HostConfigIsolationEnum = {}));
export var VolumeScopeEnum;
(function (VolumeScopeEnum) {
    VolumeScopeEnum["Empty"] = "";
    VolumeScopeEnum["Local"] = "local";
    VolumeScopeEnum["Global"] = "global";
})(VolumeScopeEnum || (VolumeScopeEnum = {}));
export var ClusterVolumeSpecAccessModeScopeEnum;
(function (ClusterVolumeSpecAccessModeScopeEnum) {
    ClusterVolumeSpecAccessModeScopeEnum["Empty"] = "";
    ClusterVolumeSpecAccessModeScopeEnum["Single"] = "single";
    ClusterVolumeSpecAccessModeScopeEnum["Multi"] = "multi";
})(ClusterVolumeSpecAccessModeScopeEnum || (ClusterVolumeSpecAccessModeScopeEnum = {}));
export var ClusterVolumeSpecAccessModeSharingEnum;
(function (ClusterVolumeSpecAccessModeSharingEnum) {
    ClusterVolumeSpecAccessModeSharingEnum["Empty"] = "";
    ClusterVolumeSpecAccessModeSharingEnum["None"] = "none";
    ClusterVolumeSpecAccessModeSharingEnum["Readonly"] = "readonly";
    ClusterVolumeSpecAccessModeSharingEnum["Onewriter"] = "onewriter";
    ClusterVolumeSpecAccessModeSharingEnum["All"] = "all";
})(ClusterVolumeSpecAccessModeSharingEnum || (ClusterVolumeSpecAccessModeSharingEnum = {}));
export var ClusterVolumeSpecAccessModeAvailabilityEnum;
(function (ClusterVolumeSpecAccessModeAvailabilityEnum) {
    ClusterVolumeSpecAccessModeAvailabilityEnum["Empty"] = "";
    ClusterVolumeSpecAccessModeAvailabilityEnum["Active"] = "active";
    ClusterVolumeSpecAccessModeAvailabilityEnum["Pause"] = "pause";
    ClusterVolumeSpecAccessModeAvailabilityEnum["Drain"] = "drain";
})(ClusterVolumeSpecAccessModeAvailabilityEnum || (ClusterVolumeSpecAccessModeAvailabilityEnum = {}));
export var ClusterVolumePublishStatusStateEnum;
(function (ClusterVolumePublishStatusStateEnum) {
    ClusterVolumePublishStatusStateEnum["Empty"] = "";
    ClusterVolumePublishStatusStateEnum["PendingPublish"] = "pending-publish";
    ClusterVolumePublishStatusStateEnum["Published"] = "published";
    ClusterVolumePublishStatusStateEnum["PendingNodeUnpublish"] = "pending-node-unpublish";
    ClusterVolumePublishStatusStateEnum["PendingControllerUnpublish"] = "pending-controller-unpublish";
})(ClusterVolumePublishStatusStateEnum || (ClusterVolumePublishStatusStateEnum = {}));
export var ProcedureState;
(function (ProcedureState) {
    /** Last run successful */
    ProcedureState["Ok"] = "Ok";
    /** Last run failed */
    ProcedureState["Failed"] = "Failed";
    /** Currently running */
    ProcedureState["Running"] = "Running";
    /** Other case (never run) */
    ProcedureState["Unknown"] = "Unknown";
})(ProcedureState || (ProcedureState = {}));
export var RepoState;
(function (RepoState) {
    /** Unknown case */
    RepoState["Unknown"] = "Unknown";
    /** Last clone / pull successful (or never cloned) */
    RepoState["Ok"] = "Ok";
    /** Last clone / pull failed */
    RepoState["Failed"] = "Failed";
    /** Currently cloning */
    RepoState["Cloning"] = "Cloning";
    /** Currently pulling */
    RepoState["Pulling"] = "Pulling";
    /** Currently building */
    RepoState["Building"] = "Building";
})(RepoState || (RepoState = {}));
export var ResourceSyncState;
(function (ResourceSyncState) {
    /** Last sync successful (or never synced). No Changes pending */
    ResourceSyncState["Ok"] = "Ok";
    /** Last sync failed */
    ResourceSyncState["Failed"] = "Failed";
    /** Currently syncing */
    ResourceSyncState["Syncing"] = "Syncing";
    /** Updates pending */
    ResourceSyncState["Pending"] = "Pending";
    /** Other case */
    ResourceSyncState["Unknown"] = "Unknown";
})(ResourceSyncState || (ResourceSyncState = {}));
export var ServerState;
(function (ServerState) {
    /** Server is unreachable. */
    ServerState["NotOk"] = "NotOk";
    /** Server health check passing. */
    ServerState["Ok"] = "Ok";
    /** Server is disabled. */
    ServerState["Disabled"] = "Disabled";
})(ServerState || (ServerState = {}));
export var StackState;
(function (StackState) {
    /** All containers are running. */
    StackState["Running"] = "running";
    /** All containers are paused */
    StackState["Paused"] = "paused";
    /** All contianers are stopped */
    StackState["Stopped"] = "stopped";
    /** All containers are created */
    StackState["Created"] = "created";
    /** All containers are restarting */
    StackState["Restarting"] = "restarting";
    /** All containers are dead */
    StackState["Dead"] = "dead";
    /** All containers are removing */
    StackState["Removing"] = "removing";
    /** The containers are in a mix of states */
    StackState["Unhealthy"] = "unhealthy";
    /** The stack is not deployed */
    StackState["Down"] = "down";
    /** Server not reachable */
    StackState["Unknown"] = "unknown";
})(StackState || (StackState = {}));
export var AwsVolumeType;
(function (AwsVolumeType) {
    AwsVolumeType["Gp2"] = "gp2";
    AwsVolumeType["Gp3"] = "gp3";
    AwsVolumeType["Io1"] = "io1";
    AwsVolumeType["Io2"] = "io2";
})(AwsVolumeType || (AwsVolumeType = {}));
export var RepoWebhookAction;
(function (RepoWebhookAction) {
    RepoWebhookAction["Clone"] = "Clone";
    RepoWebhookAction["Pull"] = "Pull";
    RepoWebhookAction["Build"] = "Build";
})(RepoWebhookAction || (RepoWebhookAction = {}));
export var StackWebhookAction;
(function (StackWebhookAction) {
    StackWebhookAction["Refresh"] = "Refresh";
    StackWebhookAction["Deploy"] = "Deploy";
})(StackWebhookAction || (StackWebhookAction = {}));
export var SyncWebhookAction;
(function (SyncWebhookAction) {
    SyncWebhookAction["Refresh"] = "Refresh";
    SyncWebhookAction["Sync"] = "Sync";
})(SyncWebhookAction || (SyncWebhookAction = {}));
export var HetznerDatacenter;
(function (HetznerDatacenter) {
    HetznerDatacenter["Nuremberg1Dc3"] = "Nuremberg1Dc3";
    HetznerDatacenter["Helsinki1Dc2"] = "Helsinki1Dc2";
    HetznerDatacenter["Falkenstein1Dc14"] = "Falkenstein1Dc14";
    HetznerDatacenter["AshburnDc1"] = "AshburnDc1";
    HetznerDatacenter["HillsboroDc1"] = "HillsboroDc1";
    HetznerDatacenter["SingaporeDc1"] = "SingaporeDc1";
})(HetznerDatacenter || (HetznerDatacenter = {}));
export var HetznerServerType;
(function (HetznerServerType) {
    /** CPX11 - AMD 2 Cores, 2 Gb Ram, 40 Gb disk */
    HetznerServerType["SharedAmd2Core2Ram40Disk"] = "SharedAmd2Core2Ram40Disk";
    /** CAX11 - Arm 2 Cores, 4 Gb Ram, 40 Gb disk */
    HetznerServerType["SharedArm2Core4Ram40Disk"] = "SharedArm2Core4Ram40Disk";
    /** CX22 - Intel 2 Cores, 4 Gb Ram, 40 Gb disk */
    HetznerServerType["SharedIntel2Core4Ram40Disk"] = "SharedIntel2Core4Ram40Disk";
    /** CPX21 - AMD 3 Cores, 4 Gb Ram, 80 Gb disk */
    HetznerServerType["SharedAmd3Core4Ram80Disk"] = "SharedAmd3Core4Ram80Disk";
    /** CAX21 - Arm 4 Cores, 8 Gb Ram, 80 Gb disk */
    HetznerServerType["SharedArm4Core8Ram80Disk"] = "SharedArm4Core8Ram80Disk";
    /** CX32 - Intel 4 Cores, 8 Gb Ram, 80 Gb disk */
    HetznerServerType["SharedIntel4Core8Ram80Disk"] = "SharedIntel4Core8Ram80Disk";
    /** CPX31 - AMD 4 Cores, 8 Gb Ram, 160 Gb disk */
    HetznerServerType["SharedAmd4Core8Ram160Disk"] = "SharedAmd4Core8Ram160Disk";
    /** CAX31 - Arm 8 Cores, 16 Gb Ram, 160 Gb disk */
    HetznerServerType["SharedArm8Core16Ram160Disk"] = "SharedArm8Core16Ram160Disk";
    /** CX42 - Intel 8 Cores, 16 Gb Ram, 160 Gb disk */
    HetznerServerType["SharedIntel8Core16Ram160Disk"] = "SharedIntel8Core16Ram160Disk";
    /** CPX41 - AMD 8 Cores, 16 Gb Ram, 240 Gb disk */
    HetznerServerType["SharedAmd8Core16Ram240Disk"] = "SharedAmd8Core16Ram240Disk";
    /** CAX41 - Arm 16 Cores, 32 Gb Ram, 320 Gb disk */
    HetznerServerType["SharedArm16Core32Ram320Disk"] = "SharedArm16Core32Ram320Disk";
    /** CX52 - Intel 16 Cores, 32 Gb Ram, 320 Gb disk */
    HetznerServerType["SharedIntel16Core32Ram320Disk"] = "SharedIntel16Core32Ram320Disk";
    /** CPX51 - AMD 16 Cores, 32 Gb Ram, 360 Gb disk */
    HetznerServerType["SharedAmd16Core32Ram360Disk"] = "SharedAmd16Core32Ram360Disk";
    /** CCX13 - AMD 2 Cores, 8 Gb Ram, 80 Gb disk */
    HetznerServerType["DedicatedAmd2Core8Ram80Disk"] = "DedicatedAmd2Core8Ram80Disk";
    /** CCX23 - AMD 4 Cores, 16 Gb Ram, 160 Gb disk */
    HetznerServerType["DedicatedAmd4Core16Ram160Disk"] = "DedicatedAmd4Core16Ram160Disk";
    /** CCX33 - AMD 8 Cores, 32 Gb Ram, 240 Gb disk */
    HetznerServerType["DedicatedAmd8Core32Ram240Disk"] = "DedicatedAmd8Core32Ram240Disk";
    /** CCX43 - AMD 16 Cores, 64 Gb Ram, 360 Gb disk */
    HetznerServerType["DedicatedAmd16Core64Ram360Disk"] = "DedicatedAmd16Core64Ram360Disk";
    /** CCX53 - AMD 32 Cores, 128 Gb Ram, 600 Gb disk */
    HetznerServerType["DedicatedAmd32Core128Ram600Disk"] = "DedicatedAmd32Core128Ram600Disk";
    /** CCX63 - AMD 48 Cores, 192 Gb Ram, 960 Gb disk */
    HetznerServerType["DedicatedAmd48Core192Ram960Disk"] = "DedicatedAmd48Core192Ram960Disk";
})(HetznerServerType || (HetznerServerType = {}));
export var HetznerVolumeFormat;
(function (HetznerVolumeFormat) {
    HetznerVolumeFormat["Xfs"] = "Xfs";
    HetznerVolumeFormat["Ext4"] = "Ext4";
})(HetznerVolumeFormat || (HetznerVolumeFormat = {}));
export var PortTypeEnum;
(function (PortTypeEnum) {
    PortTypeEnum["EMPTY"] = "";
    PortTypeEnum["TCP"] = "tcp";
    PortTypeEnum["UDP"] = "udp";
    PortTypeEnum["SCTP"] = "sctp";
})(PortTypeEnum || (PortTypeEnum = {}));
export var SearchCombinator;
(function (SearchCombinator) {
    SearchCombinator["Or"] = "Or";
    SearchCombinator["And"] = "And";
})(SearchCombinator || (SearchCombinator = {}));
